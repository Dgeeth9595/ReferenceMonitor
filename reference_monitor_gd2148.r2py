# Singleton/SingletonPattern.py
import time
import thread

class ABopenfile:
    class __ABFile:
        def __init__(self, filename,create):
            self.filename = filename
            self.val = open(filename,"w+")

        def write(self,data):
            print "data: ", self.val
            self.val.write(data)

        def _close(self):
          try:
            self.val.close()
          except:
            pass

    instance = {}
    #{filename:{create:[object,instance_count]}}
    def __init__(self, filename, create):
        self.filename = filename
        self.create = create

        #Check if filename already exist
        if filename not in ABopenfile.instance:
          #Check if object with same create type exit
          fileObj = ABopenfile.__ABFile(filename,"w+")
          ABopenfile.instance[filename] = {}
          ABopenfile.instance[filename][create] = []
          ABopenfile.instance[filename][create].append(fileObj)
          ABopenfile.instance[filename][create].append(1)
        else:
          if create not in ABopenfile.instance[filename]:
            fileObj = ABopenfile.__ABFile(filename,"w+")
            ABopenfile.instance[filename][create] = []
            ABopenfile.instance[filename][create].append(fileObj)
            ABopenfile.instance[filename][create].append(1)

          elif create in self.instance[filename] and self.instance[filename][create][1] == 0:
            #Previously closed file object/Reopening it
            ABopenfile.instance[filename][create][0] = ABopenfile.__ABFile(filename,"w+")
            ABopenfile.instance[filename][create][1] += 1

    def __getattr__(self, name):
        return getattr(self.instance[self.filename][self.create][0], name)

    
    def close(self):
        ABopenfile.instance[self.filename][self.create][1] -= 1

        if ABopenfile.instance[self.filename][self.create][1] == 0:
          ABopenfile.instance[self.filename][self.create][0]._close()


