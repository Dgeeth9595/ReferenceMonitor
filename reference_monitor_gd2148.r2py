"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 

Reference Monitor Functional Requirement:
  1. When an app calls ABopenfile(), the method opens the A/B files, which you should name <filename>.a and <filename>.b.
     One to read from and one to write to.
     readat()  Reads from -> <filename>.a 
     writeat() Writes to  -> <filename>.b
  2. A valid files content should start with 'S' and end with 'E'
  3. Update the original file with the new data IF the new data is valid on close()
  4. Not produce any errors
      *Normal operations should not be blocked or produce any output
      *Invalid operations should not produce any output to the user   

  #The underlying file object function in repy handles thread for a singular file object.
""" 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():

  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    
    if self.Afn in listfiles():
      #if file exist, assume content exist.. do not need to add init content to readat file
      self.open(create,False)
    else:
      # make the files and add 'SE' to the readat file...
      self.open(create,True)
    

  def open(self,create,initContent):
    try:
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      if initContent:
        self.Afile.writeat('SE',0)
    except:
      #If file's open or if filename is invalid. Ignore instance.
      pass

  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    try:
      self.Bfile.writeat(data,offset)
    except:
      #If offset is invalid. Ignore instance.
      pass

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    try:
      return self.Afile.readat(bytes,offset)
    except:
      #If offset is invalid. Ignore instance.
      return ""

  def close(self):
    try:
      sCHAR = "S"
      eCHAR = "E"

      bFileContent = self.Bfile.readat(None,0)
      if bFileContent != None and bFileContent.startswith(sCHAR) and bFileContent.endswith(eCHAR):
        self.Afile.writeat(bFileContent,0)
      else:
        self.Bfile.writeat(self.Afile.readat(None,0),0)

      self.Bfile.close()
      self.Afile.close()
    except:
      #If offset is invalid. Ignore instance.
      pass
    
def ABopenfile(filename, create):
  fileObj = ABFile(filename,create)
  return fileObj



# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()